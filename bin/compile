#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# debug
# set -x

# clean up leaking environment
unset GIT_DIR

# config
HEROKU_CLIENT_URL="http://assets.heroku.com.s3.amazonaws.com/heroku-client/heroku-client.tgz"

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
LP_DIR=`cd $(dirname $0); cd ..; pwd`
BUILDPACK_DIR="$(dirname $(dirname $0))"

function error() {
  echo " !     $*" >&2
  exit 1
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

function package_download() {
  engine="$1"
  version="$2"
  location="$3"

  mkdir -p $location
  package="https://${S3_BUCKET}.s3.amazonaws.com/$engine-$version.tgz"
  curl $package -s -o - | tar xzf - -C $location
}

echo "-----> Fetching and vendoring Heroku Toolbelt into slug"

# vendor directories
VENDORED_TOOLBELT="vendor/heroku-toolbelt"

# download and extract the client tarball
rm -rf "$BUILD_DIR/$VENDORED_TOOLBELT"
mkdir -p "$BUILD_DIR/$VENDORED_TOOLBELT"
cd "$BUILD_DIR/$VENDORED_TOOLBELT"

if [[ -z "$(which wget)" ]]; then
  curl -s $HEROKU_CLIENT_URL | tar xz
else
  wget -qO- $HEROKU_CLIENT_URL | tar xz
fi

mv heroku-client/* .
rmdir heroku-client

echo "-----> Moving the netrc generation script into app/.profile.d"
mkdir -p $BUILD_DIR/.profile.d
cp "$BUILDPACK_DIR/bin/gen-netrc.sh" $BUILD_DIR/.profile.d/
chmod +x $BUILD_DIR/.profile.d/gen-netrc.sh

echo "-----> Moving the heroku toolbelt PATH script into app/.profile.d"
cp "$BUILDPACK_DIR/bin/toolbelt.sh" $BUILD_DIR/.profile.d/
chmod +x $BUILD_DIR/.profile.d/toolbelt.sh

echo "-----> heroku toolbelt installation done"
